// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/hh02/minimal-douyin/kitex_gen/videorpc"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videorpc.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideo":      kitex.NewMethodInfo(createVideoHandler, newCreateVideoArgs, newCreateVideoResult, false),
		"GetVideoByUserId": kitex.NewMethodInfo(getVideoByUserIdHandler, newGetVideoByUserIdArgs, newGetVideoByUserIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videorpc.CreateVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videorpc.VideoService).CreateVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateVideoArgs:
		success, err := handler.(videorpc.VideoService).CreateVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateVideoResult)
		realResult.Success = success
	}
	return nil
}
func newCreateVideoArgs() interface{} {
	return &CreateVideoArgs{}
}

func newCreateVideoResult() interface{} {
	return &CreateVideoResult{}
}

type CreateVideoArgs struct {
	Req *videorpc.CreateVideoRequest
}

func (p *CreateVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateVideoArgs) Unmarshal(in []byte) error {
	msg := new(videorpc.CreateVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateVideoArgs_Req_DEFAULT *videorpc.CreateVideoRequest

func (p *CreateVideoArgs) GetReq() *videorpc.CreateVideoRequest {
	if !p.IsSetReq() {
		return CreateVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateVideoResult struct {
	Success *videorpc.CreateVideoResponse
}

var CreateVideoResult_Success_DEFAULT *videorpc.CreateVideoResponse

func (p *CreateVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateVideoResult) Unmarshal(in []byte) error {
	msg := new(videorpc.CreateVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateVideoResult) GetSuccess() *videorpc.CreateVideoResponse {
	if !p.IsSetSuccess() {
		return CreateVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*videorpc.CreateVideoResponse)
}

func (p *CreateVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videorpc.GetVideoByUserIdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videorpc.VideoService).GetVideoByUserId(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoByUserIdArgs:
		success, err := handler.(videorpc.VideoService).GetVideoByUserId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoByUserIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoByUserIdArgs() interface{} {
	return &GetVideoByUserIdArgs{}
}

func newGetVideoByUserIdResult() interface{} {
	return &GetVideoByUserIdResult{}
}

type GetVideoByUserIdArgs struct {
	Req *videorpc.GetVideoByUserIdRequest
}

func (p *GetVideoByUserIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoByUserIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoByUserIdArgs) Unmarshal(in []byte) error {
	msg := new(videorpc.GetVideoByUserIdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoByUserIdArgs_Req_DEFAULT *videorpc.GetVideoByUserIdRequest

func (p *GetVideoByUserIdArgs) GetReq() *videorpc.GetVideoByUserIdRequest {
	if !p.IsSetReq() {
		return GetVideoByUserIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoByUserIdArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoByUserIdResult struct {
	Success *videorpc.GetVideoByUserIdResponse
}

var GetVideoByUserIdResult_Success_DEFAULT *videorpc.GetVideoByUserIdResponse

func (p *GetVideoByUserIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoByUserIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoByUserIdResult) Unmarshal(in []byte) error {
	msg := new(videorpc.GetVideoByUserIdResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoByUserIdResult) GetSuccess() *videorpc.GetVideoByUserIdResponse {
	if !p.IsSetSuccess() {
		return GetVideoByUserIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoByUserIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*videorpc.GetVideoByUserIdResponse)
}

func (p *GetVideoByUserIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideo(ctx context.Context, Req *videorpc.CreateVideoRequest) (r *videorpc.CreateVideoResponse, err error) {
	var _args CreateVideoArgs
	_args.Req = Req
	var _result CreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoByUserId(ctx context.Context, Req *videorpc.GetVideoByUserIdRequest) (r *videorpc.GetVideoByUserIdResponse, err error) {
	var _args GetVideoByUserIdArgs
	_args.Req = Req
	var _result GetVideoByUserIdResult
	if err = p.c.Call(ctx, "GetVideoByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
